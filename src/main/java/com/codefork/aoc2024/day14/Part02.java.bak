package com.codefork.aoc2024.day14;

import com.codefork.aoc2024.Problem;
import com.codefork.aoc2024.util.Assert;

import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.Scanner;

public class Part02 extends Problem {

    public String solve(int width, int height, Stream<String> data) {
        var swarm = Swarm.create(data, width, height);
        var keepGoing = true;
        var i = 0;
        var scanner = new Scanner(System.in);
        while(i < 1000000) {
            var newSwarm = swarm.doMoves(1);

            // an xmas tree is going to be bottom heavy, so only show the trees
            // where bottom sections have more robots than top ones

            var quadrantCounts = newSwarm.getQuadrantCounts();

            var bottomHeavy = quadrantCounts.get(2).floatValue() > quadrantCounts.get(0).floatValue() * 1.25 &&
                    quadrantCounts.get(3).floatValue() > quadrantCounts.get(1).floatValue() * 1.25;

//            var topHeavy = quadrantCounts.get(0).floatValue() > quadrantCounts.get(2).floatValue() * 1.4 &&
//                    quadrantCounts.get(1).floatValue() > quadrantCounts.get(3).floatValue() * 1.4;

            if (bottomHeavy) {
                System.out.println("--------------------------");
                System.out.println("i=" + i);
                newSwarm.print();
            }

//              -------------------------------------------------------------

//            var sectionCounts = newSwarm.getCustomSectionCounts();
//            if (sectionCounts.get(4) > sectionCounts.get(2) &&
//                      sectionCounts.get(2) > sectionCounts.get(0) &&
//                      sectionCounts.get(5) > sectionCounts.get(3) &&
//                      sectionCounts.get(3) > sectionCounts.get(1)) {
//                System.out.println("--------------------------");
//                System.out.println("i=" + i);
//                newSwarm.print();
//            }

            // --------------------------------------------------

//            record Pos(int x, int y) {
//            }
//
//            var counts = newSwarm.robots().stream()
//                    .collect(Collectors.toMap(
//                            robot -> new Pos(robot.x(), robot.y()),
//                            robot -> 1,
//                            Integer::sum));
//
//            if(counts.values().stream().anyMatch(c -> c > 5)) {
//                System.out.println("--------------------------");
//                System.out.println("i=" + i);
//                newSwarm.print();
//            }

            //scanner.nextLine();
            swarm = newSwarm;
            i++;
        }

        return String.valueOf(i);
    }

    @Override
    public String solve() {
        return solve(101, 103, getInput());
    }

    public static void main(String[] args) {
        new Part02().run();
    }
}
